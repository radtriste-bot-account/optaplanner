import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

deployProperties = [:]
pipelineProperties = [:]

String optaplannerRepository = 'optaplanner'
String vehicleRoutingRepository = 'optaweb-vehicle-routing'
String employeeRosteringRepository = 'optaweb-employee-rostering'

pipeline {
    agent {
        label 'kie-rhel7'
    }

    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }

    // parameters {
    // For parameters, check into ./dsl/nightly_release.groovy file
    // }

    environment {
        // Some generated env is also defined into ./dsl/jobs/nightly_release.groovy file
        
        PROPERTIES_FILE_NAME = 'deployment.properties'
        BOT_BRANCH_HASH = "${util.generateHash(10)}"
        GITHUB_CLI_VERSION = '0.11.1'
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()
                    
                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                        assert getKogitoVersion() != ''
                    }

                    installGithubCLI()
                }
            }
        }

        stage('Merge OptaPlanner deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir(optaplannerRepository) {
                        checkoutRepo(optaplannerRepository)
                        mergeAndPush(getDeployPrLink(optaplannerRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Merge Optaweb Vehicle Routing deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir(vehicleRoutingRepository) {
                        checkoutRepo(vehicleRoutingRepository)
                        mergeAndPush(getDeployPrLink(vehicleRoutingRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Merge Optaweb Employee Rostering deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir(employeeRosteringRepository) {
                        checkoutRepo(employeeRosteringRepository)
                        mergeAndPush(getDeployPrLink(employeeRosteringRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Upload OptaPlanner documentation and distribution') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    getMavenCommand().inDirectory(optaplannerRepository).skipTests(true).withProperty('full').run('clean install')
                    uploadDistribution(optaplannerRepository)
                }
            }
        }

        stage('Upload Vehicle Routing documentation and distribution') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    getMavenCommand().inDirectory(vehicleRoutingRepository).skipTests(true).run('clean install')
                    uploadDistribution(vehicleRoutingRepository)
                }
            }
        }

        stage('Upload Employee Rostering documentation and distribution') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    getMavenCommand().inDirectory(employeeRosteringRepository).skipTests(true).run('clean install')
                    uploadDistribution(employeeRosteringRepository)
                }
            }
        }

        // stage('Update OptaPlanner website') {
        //     when {
        //         expression { return isRelease() }
        //     }
        //     steps {
        //         script {
        //             final String websiteRepository = 'optaplanner-website'
        //             String prLink = null
        //             dir("$websiteRepository-bot") {
        //                 String prBranchName = createWebsitePrBranch(websiteRepository)

        //                 // Update versions in links on the website.
        //                 sh "./build/update-versions.sh ${getProjectVersion()} ${getNextMinorSnapshotVersion(getProjectVersion())}"

        //                 // Update the XSDs. OptaPlanner must be cloned and build with the full profile before.
        //                 String optaplannerRoot = "$WORKSPACE/optaplanner"
        //                 sh "cp $optaplannerRoot/optaplanner-core/target/classes/solver.xsd xsd/solver/solver-8.xsd"
        //                 sh "cp $optaplannerRoot/optaplanner-benchmark/target/classes/benchmark.xsd xsd/benchmark/benchmark-8.xsd"

        //                 // Add changed files, commit, open and merge PR
        //                 prLink = commitAndCreatePR("Release OptaPlanner ${getProjectVersion()}", { sh 'git add xsd/\\*.xsd _config/pom.yml' }, prBranchName, 'master')
        //             }
        //             dir(websiteRepository) {
        //                 checkoutRepo(websiteRepository, 'master')
        //                 mergeAndPush(prLink, 'master')
        //             }
        //         }
        //     }
        // }

        stage('Set OptaPlanner next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())

                    dir("${optaplannerRepository}-bot") {
                        prepareForPR(optaplannerRepository)
                        String nextSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                        maven.mvnVersionsSet(getMavenCommand(), nextSnapshotVersion, true)
                        maven.mvnSetVersionProperty(getMavenCommand(), 'version.org.kie.kogito', getNextMicroSnapshotVersion(getKogitoVersion()))

                        String prLink = commitAndCreatePR("[${getGitBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}")
                        setPipelinePrLink(optaplannerRepository, prLink)
                    }
                    dir(optaplannerRepository) {
                        sh "git checkout ${getGitBranch()}"
                        mergeAndPush(getPipelinePrLink(optaplannerRepository))
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }

        stage('Set Optaweb Vehicle Routing next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                    dir("$vehicleRoutingRepository-bot") {
                        prepareForPR(vehicleRoutingRepository)
                        maven.mvnVersionsUpdateParentAndChildModules(nextMicroSnapshotVersion, true)
                        
                        String prLink = commitAndCreatePR("[${getGitBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}")
                        setPipelinePrLink(vehicleRoutingRepository, prLink)
                    }
                    dir(vehicleRoutingRepository) {
                        sh "git checkout ${getGitBranch()}"
                        mergeAndPush(getPipelinePrLink(vehicleRoutingRepository))
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }

        stage('Set Optaweb Employee Rostering next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                    dir("$employeeRosteringRepository-bot") {
                        prepareForPR(employeeRosteringRepository)
                        maven.mvnVersionsUpdateParentAndChildModules(nextMicroSnapshotVersion, true)
                        
                        String prLink = commitAndCreatePR("[${getGitBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}")
                        setPipelinePrLink(employeeRosteringRepository, prLink)
                    }
                    dir(employeeRosteringRepository) {
                        sh "git checkout ${getGitBranch()}"
                        mergeAndPush(getPipelinePrLink(employeeRosteringRepository))
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != ''){
        if(!deployUrl.endsWith('/')){
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}"
        deployProperties = readProperties file: PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect{ entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ''
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ''){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return params.RELEASE || (getDeployProperty('release') == 'true')
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')
}

String getKogitoVersion() {
    return getParamOrDeployProperty('KOGITO_VERSION', 'kogito.version')
}

String getNextMicroSnapshotVersion(String currentVersion) {
    return util.getNextVersion(currentVersion, 'micro')
}

String getNextMinorSnapshotVersion(String currentVersion) {
    return util.getNextVersion(currentVersion, 'minor')
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getGitBranch() {
    return env.GIT_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsID(){
    return env.AUTHOR_CREDS_ID
}

String getBotAuthorCredsID(){
    return env.BOT_CREDENTIALS_ID
}

String getDeployPrLink(String repo){
    return getDeployProperty("${repo}.pr.link")
}

String getPipelinePrLink(String repo){
    return pipelineProperties["${repo}.pr.link"]
}

void setPipelinePrLink(String repo, String value){
    pipelineProperties["${repo}.pr.link"] = value
}

String getSnapshotBranch(){
    return "${getNextMicroSnapshotVersion(getProjectVersion()).toLowerCase()}-${env.BOT_BRANCH_HASH}"
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////

void checkoutRepo(String repo, String branch) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), branch, false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

void checkoutRepo(String repo) {
    checkoutRepo(repo, getGitBranch())
}

void mergeAndPush(String prLink, String targetBranch) {
    if (prLink != '') {
        githubscm.mergePR(prLink, getGitAuthorCredsID())
        githubscm.pushObject('origin', targetBranch, getGitAuthorCredsID())
    }
}

void mergeAndPush(String prLink) {
    mergeAndPush(prLink, getGitBranch())
}

void tagLatest() {
    if (getGitTag() != '') {
        githubscm.tagRepository(getGitTag(), env.BUILD_TAG)
        githubscm.pushObject('origin', "--tags ${getGitTag()}", getGitAuthorCredsID())
    }
}

void prepareForPR(String repo) {
    checkoutRepo(repo)
    githubscm.forkRepo(getBotAuthorCredsID())
    githubscm.createBranch(getSnapshotBranch())
}

String commitAndCreatePR(String commitMsg, Closure precommit, String localBranch, String targetBranch) {
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
    
    githubscm.commitChanges(commitMsg, precommit)
    githubscm.pushObject('origin', localBranch, getBotAuthorCredsID())
    return githubscm.createPR(commitMsg, prBody, targetBranch, getBotAuthorCredsID())
}

String commitAndCreatePR(String commitMsg) {
    return commitAndCreatePR(commitMsg, { githubscm.findAndStageNotIgnoredFiles('pom.xml') }, getSnapshotBranch(), getGitBranch())
}

String createWebsitePrBranch(String websiteRepository) {
    checkoutRepo(websiteRepository, 'master') // there is no other branch
    githubscm.forkRepo(getBotAuthorCredsID())
    String prBranchName = "${getProjectVersion().toLowerCase()}-${env.BOT_BRANCH_HASH}"
    githubscm.createBranch(prBranchName)
    return prBranchName
}

void installGithubCLI() {
    sh """
    wget https://github.com/cli/cli/releases/download/v${env.GITHUB_CLI_VERSION}/gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    tar xzf gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    mv gh_${env.GITHUB_CLI_VERSION}_linux_amd64/bin/gh .
    rm -r gh_${env.GITHUB_CLI_VERSION}_linux_amd64*
    """
}

void uploadDistribution(String directory) {
    echo "uploadDistribution for ${directory}"
    // dir(directory) {
    //     withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',
    //             keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {
    //         // For testing, simulate connection via SSH:
    //         // sh "ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org"
    //         sh "./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT"
    //     }
    // }
}

MavenCommand getMavenCommand() {
    mvnCmd = new MavenCommand(this, ['-fae'])
                    .withSettingsXmlId(env.MAVEN_SETTINGS_CONFIG_FILE_ID)
    if (env.MAVEN_DEPENDENCIES_REPOSITORY) {
        mvnCmd.withDependencyRepositoryInSettings('deps-repo', env.MAVEN_DEPENDENCIES_REPOSITORY)
    }
    return mvnCmd
}

void runMavenDeploy(MavenCommand mvnCmd) {
    mvnCmd = mvnCmd.clone()
    if(env.MAVEN_DEPLOY_REPOSITORY){
        mvnCmd.withDeployRepository(env.MAVEN_DEPLOY_REPOSITORY)
    }
    mvnCmd.skipTests(true).run('clean deploy')
}
